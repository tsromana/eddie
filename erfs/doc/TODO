%%%
%%% The contents of this file are subject to the Erlang Public License,
%%% Version 1.0, (the "License"); you may not use this file except in
%%% compliance with the License. You may obtain a copy of the License at
%%% http://www.eddieware.org/EPL
%%%
%%% Software distributed under the License is distributed on an "AS IS"
%%% basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
%%% the License for the specific language governing rights and limitations
%%% under the License.
%%%
%%% The Original Code is Erfs-0.2b1.
%%%
%%% The Initial Developer of the Original Code is Ericsson Telecom
%%% AB. Portions created by Ericsson are Copyright (c), 1998, Ericsson
%%% Telecom AB. All Rights Reserved.
%%%
%%% Contributor(s): ______________________________________.
%%%

%%%----------------------------------------------------------------------
%%% File    : TODO
%%% Author  : Anders Dahlin <anders@eddieware.org>
%%% Purpose : Host information on what needs to be done in ERFS
%%% Created :  8 Dec 1998 by Anders Dahlin <anders@eddieware.org>
%%%----------------------------------------------------------------------

TODO for ERFS-0.2b1

- Node supervision: Monitor nodes and perform actions when nodes come
back. Erfs is prepared for this but it's not implemented.

- Fault tolerance: The handling of unsuccessful operations is very
limited.

- Shell scripts: Construct shell scripts that performs all the actions

- Bat files: Construct bat files (or equivalent) to perform all the
actions in the windows environment.

- Testing, testing, testing... 

- Validate or verify (maybe both): Verify/validate that a Path or the
entire file system corresponds to what is in the database.

- Effective file transfer: Send files in chunks. Look into compression
methods. 

- Synchronize: Synchronize an entire ERFS. 

- GUI: Do we need a graphical user interface? 

- Automatic replication: Is it needed?

- Logging: Log all actions

- Remote code loading: Load the erfs code from a running erfs node
when you do add_node. This will remove the requirement of having erfs
installed on all nodes.

- Undo: Implement the functionality to undo changes. Not very likely
to be implemented.

- CODA: Check out CODA.
